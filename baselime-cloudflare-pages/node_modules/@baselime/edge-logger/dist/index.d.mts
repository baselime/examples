import { ExecutionContext } from '@cloudflare/workers-types';

type BaselimeLog = {
    message: string;
    error?: string;
    requestId: string;
    level: string;
    data: any;
};
type BaselimeLoggerArgs = {
    ctx: ExecutionContext;
    apiKey: string;
    dataset?: string;
    service?: string;
    namespace?: string;
    baselimeUrl?: string;
    flushAfterMs?: number;
    flushAfterLogs?: number;
    requestId?: string | null;
    isLocalDev?: boolean;
};
declare class BaselimeLogger {
    private readonly ctx;
    private readonly apiKey;
    private readonly dataset;
    private readonly service;
    private readonly namespace;
    private readonly logs;
    private readonly requestId;
    private flushTimeout;
    private flushPromise;
    private flushAfterMs;
    private flushAfterLogs;
    private baselimeUrl;
    private isLocalDev;
    constructor(args: BaselimeLoggerArgs);
    private _log;
    /** Flush after X ms if there's not already
     * a flush scheduled
     * @param reset If true, cancel the current flush timeout
     */
    scheduleFlush(timeout: number, reset?: boolean): void;
    flush({ skipIfInProgress, }?: {
        skipIfInProgress?: boolean;
    }): Promise<void>;
    log(msg: string, data?: any): void;
    info(msg: string, data?: any): void;
    warn(msg: string, data?: any): void;
    error(msg: string | Error | unknown, data?: any): void;
    debug(msg: string, data?: any): void;
}

export { BaselimeLog, BaselimeLogger, BaselimeLoggerArgs };
