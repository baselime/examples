{"version":3,"file":"AwsBeanstalkDetector.js","sourceRoot":"","sources":["../../../src/detectors/AwsBeanstalkDetector.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,4CAA0C;AAC1C,wDAIkC;AAClC,8EAI6C;AAC7C,yBAAyB;AACzB,6BAA6B;AAE7B;;;;;;;GAOG;AAEH,MAAM,2BAA2B,GAC/B,6CAA6C,CAAC;AAChD,MAAM,0BAA0B,GAC9B,mDAAmD,CAAC;AAEtD,MAAa,oBAAoB;IAK/B;QACE,IAAI,OAAO,CAAC,QAAQ,KAAK,OAAO,EAAE;YAChC,IAAI,CAAC,mBAAmB,GAAG,0BAA0B,CAAC;SACvD;aAAM;YACL,IAAI,CAAC,mBAAmB,GAAG,2BAA2B,CAAC;SACxD;IACH,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,OAAiC;QAC5C,IAAI;YACF,MAAM,oBAAoB,CAAC,eAAe,CACxC,IAAI,CAAC,mBAAmB,EACxB,EAAE,CAAC,SAAS,CAAC,IAAI,CAClB,CAAC;YAEF,MAAM,OAAO,GAAG,MAAM,oBAAoB,CAAC,aAAa,CACtD,IAAI,CAAC,mBAAmB,EACxB,MAAM,CACP,CAAC;YACF,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YAEvC,OAAO,IAAI,oBAAQ,CAAC;gBAClB,CAAC,iDAA0B,CAAC,cAAc,CAAC,EAAE,0CAAmB,CAAC,GAAG;gBACpE,CAAC,iDAA0B,CAAC,cAAc,CAAC,EACzC,0CAAmB,CAAC,qBAAqB;gBAC3C,CAAC,iDAA0B,CAAC,YAAY,CAAC,EACvC,0CAAmB,CAAC,qBAAqB;gBAC3C,CAAC,iDAA0B,CAAC,iBAAiB,CAAC,EAC5C,UAAU,CAAC,gBAAgB;gBAC7B,CAAC,iDAA0B,CAAC,eAAe,CAAC,EAAE,UAAU,CAAC,aAAa;gBACtE,CAAC,iDAA0B,CAAC,mBAAmB,CAAC,EAC9C,UAAU,CAAC,aAAa;aAC3B,CAAC,CAAC;SACJ;QAAC,OAAO,CAAM,EAAE;YACf,UAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;YACxD,OAAO,oBAAQ,CAAC,KAAK,EAAE,CAAC;SACzB;IACH,CAAC;;AA1CH,oDA2CC;AAzCgB,kCAAa,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAC5C,oCAAe,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;AA0ChD,QAAA,oBAAoB,GAAG,IAAI,oBAAoB,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { diag } from '@opentelemetry/api';\nimport {\n  Detector,\n  Resource,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\nimport {\n  CloudProviderValues,\n  CloudPlatformValues,\n  SemanticResourceAttributes,\n} from '@opentelemetry/semantic-conventions';\nimport * as fs from 'fs';\nimport * as util from 'util';\n\n/**\n * The AwsBeanstalkDetector can be used to detect if a process is running in AWS Elastic\n * Beanstalk and return a {@link Resource} populated with data about the beanstalk\n * plugins of AWS X-Ray. Returns an empty Resource if detection fails.\n *\n * See https://docs.amazonaws.cn/en_us/xray/latest/devguide/xray-guide.pdf\n * for more details about detecting information of Elastic Beanstalk plugins\n */\n\nconst DEFAULT_BEANSTALK_CONF_PATH =\n  '/var/elasticbeanstalk/xray/environment.conf';\nconst WIN_OS_BEANSTALK_CONF_PATH =\n  'C:\\\\Program Files\\\\Amazon\\\\XRay\\\\environment.conf';\n\nexport class AwsBeanstalkDetector implements Detector {\n  BEANSTALK_CONF_PATH: string;\n  private static readFileAsync = util.promisify(fs.readFile);\n  private static fileAccessAsync = util.promisify(fs.access);\n\n  constructor() {\n    if (process.platform === 'win32') {\n      this.BEANSTALK_CONF_PATH = WIN_OS_BEANSTALK_CONF_PATH;\n    } else {\n      this.BEANSTALK_CONF_PATH = DEFAULT_BEANSTALK_CONF_PATH;\n    }\n  }\n\n  async detect(_config?: ResourceDetectionConfig): Promise<Resource> {\n    try {\n      await AwsBeanstalkDetector.fileAccessAsync(\n        this.BEANSTALK_CONF_PATH,\n        fs.constants.R_OK\n      );\n\n      const rawData = await AwsBeanstalkDetector.readFileAsync(\n        this.BEANSTALK_CONF_PATH,\n        'utf8'\n      );\n      const parsedData = JSON.parse(rawData);\n\n      return new Resource({\n        [SemanticResourceAttributes.CLOUD_PROVIDER]: CloudProviderValues.AWS,\n        [SemanticResourceAttributes.CLOUD_PLATFORM]:\n          CloudPlatformValues.AWS_ELASTIC_BEANSTALK,\n        [SemanticResourceAttributes.SERVICE_NAME]:\n          CloudPlatformValues.AWS_ELASTIC_BEANSTALK,\n        [SemanticResourceAttributes.SERVICE_NAMESPACE]:\n          parsedData.environment_name,\n        [SemanticResourceAttributes.SERVICE_VERSION]: parsedData.version_label,\n        [SemanticResourceAttributes.SERVICE_INSTANCE_ID]:\n          parsedData.deployment_id,\n      });\n    } catch (e: any) {\n      diag.debug(`AwsBeanstalkDetector failed: ${e.message}`);\n      return Resource.empty();\n    }\n  }\n}\n\nexport const awsBeanstalkDetector = new AwsBeanstalkDetector();\n"]}