{"version":3,"file":"AwsLambdaDetector.js","sourceRoot":"","sources":["../../../src/detectors/AwsLambdaDetector.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;GAcG;;;AAEH,wDAIkC;AAClC,8EAI6C;AAE7C;;;;GAIG;AACH,MAAa,iBAAiB;IAC5B,KAAK,CAAC,MAAM,CAAC,OAAiC;QAC5C,MAAM,YAAY,GAAG,OAAO,CAAC,GAAG,CAAC,wBAAwB,CAAC;QAC1D,IAAI,CAAC,YAAY,EAAE;YACjB,OAAO,oBAAQ,CAAC,KAAK,EAAE,CAAC;SACzB;QAED,MAAM,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC;QAChE,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;QAEtC,MAAM,UAAU,GAAG;YACjB,CAAC,iDAA0B,CAAC,cAAc,CAAC,EAAE,MAAM,CACjD,0CAAmB,CAAC,GAAG,CACxB;YACD,CAAC,iDAA0B,CAAC,cAAc,CAAC,EAAE,MAAM,CACjD,0CAAmB,CAAC,UAAU,CAC/B;SACF,CAAC;QACF,IAAI,MAAM,EAAE;YACV,UAAU,CAAC,iDAA0B,CAAC,YAAY,CAAC,GAAG,MAAM,CAAC;SAC9D;QAED,IAAI,YAAY,EAAE;YAChB,UAAU,CAAC,iDAA0B,CAAC,SAAS,CAAC,GAAG,YAAY,CAAC;SACjE;QACD,IAAI,eAAe,EAAE;YACnB,UAAU,CAAC,iDAA0B,CAAC,YAAY,CAAC,GAAG,eAAe,CAAC;SACvE;QAED,OAAO,IAAI,oBAAQ,CAAC,UAAU,CAAC,CAAC;IAClC,CAAC;CACF;AA/BD,8CA+BC;AAEY,QAAA,iBAAiB,GAAG,IAAI,iBAAiB,EAAE,CAAC","sourcesContent":["/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Detector,\n  Resource,\n  ResourceDetectionConfig,\n} from '@opentelemetry/resources';\nimport {\n  CloudProviderValues,\n  CloudPlatformValues,\n  SemanticResourceAttributes,\n} from '@opentelemetry/semantic-conventions';\n\n/**\n * The AwsLambdaDetector can be used to detect if a process is running in AWS Lambda\n * and return a {@link Resource} populated with data about the environment.\n * Returns an empty Resource if detection fails.\n */\nexport class AwsLambdaDetector implements Detector {\n  async detect(_config?: ResourceDetectionConfig): Promise<Resource> {\n    const functionName = process.env.AWS_LAMBDA_FUNCTION_NAME;\n    if (!functionName) {\n      return Resource.empty();\n    }\n\n    const functionVersion = process.env.AWS_LAMBDA_FUNCTION_VERSION;\n    const region = process.env.AWS_REGION;\n\n    const attributes = {\n      [SemanticResourceAttributes.CLOUD_PROVIDER]: String(\n        CloudProviderValues.AWS\n      ),\n      [SemanticResourceAttributes.CLOUD_PLATFORM]: String(\n        CloudPlatformValues.AWS_LAMBDA\n      ),\n    };\n    if (region) {\n      attributes[SemanticResourceAttributes.CLOUD_REGION] = region;\n    }\n\n    if (functionName) {\n      attributes[SemanticResourceAttributes.FAAS_NAME] = functionName;\n    }\n    if (functionVersion) {\n      attributes[SemanticResourceAttributes.FAAS_VERSION] = functionVersion;\n    }\n\n    return new Resource(attributes);\n  }\n}\n\nexport const awsLambdaDetector = new AwsLambdaDetector();\n"]}